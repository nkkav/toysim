/***************************************************************/
/*  File       : toy_isa.ac
 *  Description: Instruction encodings and assembly formats.
 *  Author     : Nikolaos Kavvadias <nikos@nkavvadias.com>
 *
 *  Copyright (C) 2010, 2011, 2012, 2013, 2014 Nikolaos Kavvadias
 *
 *  Author affiliation:
 *    Dr. Nikolaos Kavvadias
 *    Independent Consultant -- Research Scientist
 *    Kornarou 12 Rd., Nea Ampliani,
 *    35100 Lamia, Greece
 *                                                             
 *  Contact information for the ArchC team:                     
 *    The ArchC Team                                              
 *    Computer Systems Laboratory (LSC)                           
 *    IC-UNICAMP                                                  
 *    http://www.lsc.ic.unicamp.br                                
 */
/***************************************************************/

AC_ISA(toy) {

  ac_format Type_R  = "%op:4 %rd:4 %rs:4 %rt:4 %unused:16";
  ac_format Type_I  = "%op:4 %rd:4 %imm8:8:s %unused:16";

  ac_instr<Type_R> loadi, storei, add, sub, instr_and, instr_xor, shl, shr, instr_halt, jreg;
  ac_instr<Type_I> lda, load, store, jzer, jpos, jal;

// gas MIPS specific register names
  ac_asm_map reg {
     "x"[0..15] = [0..15];
     "r"[0..15] = [0..15];
     "$"[0..15] = [0..15];
     "$zero" = 0;
     "$at" = 1;
     "rA"  = 10;
     "rB"  = 11;
     "rC"  = 12;
     "$sp" = 13;
     "rD"  = 13;
     "$fp" = 14;
     "rE"  = 14;
     "$ra" = 15;
     "rF"  = 15;
     "$pc" = 16;
  }

  ISA_CTOR(toy) {

//    lda.set_asm("%reg <- %imm", rd, imm8);
    lda.set_asm("lda %reg, %imm", rd, imm8);
    lda.set_decoder(op=0x7);

//    load.set_asm("%reg <- mem[%imm]", rd, imm8);
    load.set_asm("load %reg, %imm", rd, imm8);
    load.set_asm("ld %reg, %addr", rd, imm8);
    load.set_decoder(op=0x8);

//    store.set_asm("%reg -> mem[%imm]", rd, imm8);
    store.set_asm("store %reg, %imm", rd, imm8);
    store.set_asm("st %reg, %addr", rd, imm8);
    store.set_decoder(op=0x9);

//    loadi.set_asm("%reg <- mem[%reg]", rd, rt, rs=0);
    loadi.set_asm("loadi %reg, %reg", rd, rt, rs=0);
    loadi.set_asm("ldi %reg, %reg", rd, rt, rs=0);
    loadi.set_decoder(op=0xA);

//    storei.set_asm("mem[%reg] <- %reg", rt, rd, rs=0);
    storei.set_asm("storei %reg, %reg", rd, rt, rs=0);
    storei.set_asm("sti %reg, %reg", rd, rt, rs=0);
    storei.set_decoder(op=0xB);

//    add.set_asm("%reg <- %reg + %reg", rd, rs, rt);
    add.set_asm("add %reg, %reg, %reg", rd, rs, rt);
    add.set_decoder(op=0x1);

//    sub.set_asm("%reg <- %reg - %reg", rd, rs, rt);
    sub.set_asm("sub %reg, %reg, %reg", rd, rs, rt);
    sub.set_decoder(op=0x2);

//    instr_and.set_asm("%reg <- %reg & %reg", rd, rs, rt);
    instr_and.set_asm("and %reg, %reg, %reg", rd, rs, rt);
    instr_and.set_decoder(op=0x3);

//    instr_xor.set_asm("%reg <- %reg ^ %reg", rd, rs, rt);
    instr_xor.set_asm("xor %reg, %reg, %reg", rd, rs, rt);
    instr_xor.set_decoder(op=0x4);

//    shl.set_asm("%reg <- %reg << %reg", rd, rs, rt);
    shl.set_asm("shl %reg, %reg, %reg", rd, rs, rt);
    shl.set_decoder(op=0x5);

//    shr.set_asm("%reg <- %reg >> %reg", rd, rs, rt);
    shr.set_asm("shr %reg, %reg, %reg", rd, rs, rt);
    shr.set_decoder(op=0x6);

//    jal.set_asm("%reg <- pc, pc <- %exp", rd, imm8);
//    jal.set_asm("R[%reg] <- pc; pc <- %expRA", imm8);
    jal.set_asm("jal %reg, %exp", rd, imm8);
    jal.set_asm("jl %reg, %exp", rd, imm8);
    jal.set_decoder(op=0xF);

//    jreg.set_asm("pc <- %reg", rd, rs=0, rt=0);
    jreg.set_asm("jr %reg", rd, rs=0, rt=0);
    jreg.set_decoder(op=0xE);

//    jzer.set_asm("if (%reg == 0) pc <- %exp", rd, imm8);
//    jzer.set_asm("if (R[%reg] == 0) pc <- %expRA", rd, imm8);
    jzer.set_asm("jz %reg, %exp", rd, imm8);
    jzer.set_decoder(op=0x0C);

//    jpos.set_asm("if (%reg > 0) pc <- %exp", rd, imm8);
//    jpos.set_asm("if (R[%reg] > 0) pc <- %expRA", rd, imm8);
    jpos.set_asm("jp %reg, %exp", rd, imm8);
    jpos.set_decoder(op=0x0D);

    instr_halt.set_asm("halt", rd=0, rs=0, rt=0);
    instr_halt.set_decoder(op=0x0);

    pseudo_instr("nop") {
      "shl $zero, $zero, $zero";
    }

    pseudo_instr("move %reg, %reg") {
     "add %0, %1, $zero";
    }

    pseudo_instr("neg %reg, %reg") {
      "sub %0, $zero, %1";
    }

    pseudo_instr("li %reg, %exp") {
      "lda %0, \%hi(%1)";
      "lda $at, 8";
      "shl %0, %0, $at";
      "lda $at, \%lo(%1)";
      "add %0, %0, $at";
    }

    pseudo_instr("li %reg, %imm") {
      "lda %0, \%hi(%1)";
      "lda $at, 8";
      "shl %0, %0, $at";
      "lda $at, \%lo(%1)";
      "add %0, %0, $at";
    }

    pseudo_instr("la %reg, %addr") {
      "lda %0, \%hi(%1)";
      "lda $at, 8";
      "shl %0, %0, $at";
      "lda $at, \%lo(%1)";
      "add %0, %0, $at";
    }
  };
};
